Description: >
    This template deploys an Application Load Balancer that exposes our various ECS services.
    We create them it a seperate nested template, so it can be referenced by all of the other nested templates.

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    VPC:
        Type: AWS::EC2::VPC::Id
        Description: Choose which VPC the Application Load Balancer should be deployed to

    Subnets:
        Description: Choose which subnets the Application Load Balancer should be deployed to
        Type: List<AWS::EC2::Subnet::Id>

    SecurityGroup:
        Description: Select the Security Group to apply to the Application Load Balancer
        Type: AWS::EC2::SecurityGroup::Id

Resources:

    LoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Name: !Join [ '', ['External-', !Ref EnvironmentName] ]
            Subnets: !Ref Subnets
         #   LBCookieStickinessPolicy:
         #       - PolicyName: myLBPolicy
         #         CookieExpirationPeriod: '600'
            SecurityGroups: 
                - !Ref SecurityGroup
            Tags: 
                - Key: Name
                  Value: !Join [ '', ['External-', !Ref EnvironmentName] ]

    LoadBalancerListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            LoadBalancerArn: !Ref LoadBalancer
            Port: 80
            Protocol: HTTP
        #    PolicyNames: [myLBPolicy]
            DefaultActions: 
                - Type: forward
                  TargetGroupArn: !Ref DefaultTargetGroup
    
    # We define a default target group here, as this is a mandatory Parameters
    # when creating an Application Load Balancer Listener. This is not used, instead
    # a target group is created per-service in each service template (../services/*)
    #DefaultTargetGroup:
    #    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    #    Properties:
    #        Name: !Sub ${EnvironmentName}-default
    #        VpcId: !Ref VPC
    #        Port: 80
    #        Protocol: HTTP
            
    DefaultTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            Name: !Sub ${EnvironmentName}-external-default
            VpcId: !Ref VPC
            Port: 80
            Protocol: HTTP
            Matcher: 
                HttpCode: 200-299
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /status.html
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2
            TargetGroupAttributes:
                - Key: stickiness.enabled
                  Value: true
                - Key: stickiness.type
                  Value: lb_cookie
                - Key: stickiness.lb_cookie.duration_seconds
                  Value: '600'
Outputs:

    LoadBalancer:
        Description: A reference to the Application Load Balancer
        Value: !Ref LoadBalancer

    LoadBalancerUrl:
        Description: The URL of the ALB
        Value: !GetAtt LoadBalancer.DNSName

    Listener:
        Description: A reference to a port 80 listener
        Value: !Ref LoadBalancerListener
    
    TargetGroup:
        Description: A reference to a port 80 listener
        Value: !Ref DefaultTargetGroup
        

    
